{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Continent.svelte",
    "../../Continents.svelte",
    "../../Signin.svelte",
    "../../Signup.svelte",
    "../../UsersList.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { onMount } from \"svelte\";\n\timport Continent from \"./Continent.svelte\";\n\timport Continents from \"./Continents.svelte\";\n\timport Signup from \"./Signup.svelte\";\n\timport Signin from \"./Signin.svelte\";\n\timport Profile from \"./Profile.svelte\";\n\timport UsersList from \"./UsersList.svelte\"\n\tlet continent;\n</script>\n\n<h1>Akela</h1>\n\n<main>\n\t<UsersList/>\n<!--\t<Signup />-->\n<!--\t<Signin />-->\n<!--\t<Profile />-->\n</main>\n\n<style>\n\t/*main {*/\n\t/*\ttext-align: center;*/\n\t/*\tpadding: 1em;*/\n\t/*\tmax-width: 240px;*/\n\t/*\tmargin: 0 auto;*/\n\t/*}*/\n\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 2em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>",
    "<script>\n    // create a prop\n    export let continent;\n</script>\n\n<article>\n    <h1>{continent.name}</h1>\n    <small>\n        Population: <b>{continent.population}</b>\n    </small><br/>\n    <small>\n        Number of countries: <b>{continent.no_of_countries}</b>\n    </small><br/>\n    <small>\n        Continent's size: <b>{continent.area}</b>\n    </small>\n</article>\n\n<style>\n    article {\n        margin: 0 0 1em 0;\n    }\n    h1 {\n        font-size: 1.4em;\n        margin: 0;\n        display: block;\n    }\n</style>\n",
    "\n<script>\n    import { onMount } from \"svelte\";\n    import Continent from \"./Continent.svelte\";\n    // define the data holding variable\n    let continents;\n    let photos;\n    onMount(async () => {\n        const res = await fetch(`http://localhost:3000/api/continents`);\n        continents = await res.json();\n    });\n\n</script>\n\n{#if continents}\n    {#each continents as continent }\n        <ul>\n            <li>\n                <Continent {continent} />\n            </li>\n        </ul>\n    {/each}\n{:else}\n    <p class=\"loading\">loading...</p>\n{/if}\n\n<style>\n    .loading {\n        opacity: 0;\n        animation: 0.4s 0.8s forwards fade-in;\n    }\n    @keyframes fade-in {\n        from { opacity: 0; }\n        to { opacity: 1; }\n    }\n    li {\n        list-style-type: georgian;\n    }\n</style>",
    "<script>\n    let email = '';\n    let password = '';\n\n    let questions = [\n        { id: 1, text: `Bevers` },\n        { id: 2, text: `Welpen Jongens` },\n        { id: 3, text: `Welpen Meisjes` },\n        { id: 4, text: `Scouts` },\n        { id: 5, text: `Explorers` },\n        { id: 6, text: `Roverscouts` },\n        { id: 7, text: `Pivos` },\n    ];\n\n    let selected;\n\n    let answer = '';\n    async function postData(url = '', data = {}) {\n        // Default options are marked with *\n        const response = await fetch(url, {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'include', // include, *same-origin, omit\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        });\n        return response.json(); // parses JSON response into native JavaScript objects\n    }\n    function handleSubmit() {\n        let url = 'http://localhost:3000/api/auth/signin';\n        let data = {\n            \"email\": email,\n            \"password\": password\n        };\n        postData(url, data);\n    }\n</script>\n\n<h2>Signin</h2>\n\n<form on:submit|preventDefault={handleSubmit}>\n    <input bind:value={email} placeholder=\"enter your e-mail\">\n    <input bind:value={password} placeholder=\"enter your password\">\n    <button type=submit>\n        Submit\n    </button>\n</form>\n\n<style>\n    input { display: block; width: 500px; max-width: 100%; }\n</style>\n",
    "<script>\n    let name = '';\n    let email = '';\n    let password = '';\n\n    let questions = [\n        { id: 1, text: `Bevers` },\n        { id: 2, text: `Welpen Jongens` },\n        { id: 3, text: `Welpen Meisjes` },\n        { id: 4, text: `Scouts` },\n        { id: 5, text: `Explorers` },\n        { id: 6, text: `Roverscouts` },\n        { id: 7, text: `Pivos` },\n    ];\n\n    let selected;\n\n    let answer = '';\n    async function postData(url = '', data = {}) {\n        // Default options are marked with *\n        const response = await fetch(url, {\n            method: 'POST', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n            body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        });\n        return response.json(); // parses JSON response into native JavaScript objects\n    }\n    function handleSubmit() {\n        let url = 'http://localhost:3000/api/auth/signup';\n        let data = {\n            \"name\": name,\n            \"email\": email,\n            \"password\": password\n        };\n        postData(url, data);\n    }\n</script>\n\n<h2>Signup</h2>\n\n<form on:submit|preventDefault={handleSubmit}>\n    <input bind:value={name} placeholder=\"enter your name\">\n    <input bind:value={email} placeholder=\"enter your e-mail\">\n    <input bind:value={password} placeholder=\"enter your password\">\n<!--    <select bind:value={selected} on:change=\"{() => answer = ''}\">-->\n<!--        {#each questions as question}-->\n<!--            <option value={question}>-->\n<!--                {question.text}-->\n<!--            </option>-->\n<!--        {/each}-->\n<!--    </select>-->\n\n<!--    <input bind:value={answer}>-->\n\n    <button type=submit>\n        Submit\n    </button>\n</form>\n\n<!--<p>selected question {selected ? selected.id : '[waiting...]'}</p>-->\n\n<style>\n    input { display: block; width: 500px; max-width: 100%; }\n</style>\n",
    "<script>\n    import { Button, Col, Row } from 'sveltestrap';\n    let promise = getUsers();\n    async function getUsers() {\n        const res = await fetch(`http://localhost:3000/api/users/all`, {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            credentials: 'include', // include, *same-origin, omit\n            // headers: {\n            //     'Content-Type': 'application/json'\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n            // },\n            redirect: 'follow', // manual, *follow, error\n            referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n            // body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        });\n        const users = await res.json();\n        if (res.ok) {\n            return users;\n        } else {\n            throw new Error(users.message);\n        }\n    }\n\n\n    function isUser(id) {\n        return true;\n    }\n</script>\n\n\n{#await promise}\n    <p>...waiting</p>\n{:then users}\n    <ul class=\"list-group\">\n    {#each users as { _id, name }, i}\n        <li class=\"list-group-item d-flex \"><span class=\"align-self-center\">{name}</span> {#if isUser(_id)} <Button type=\"button\" class=\"btn-sm float-right ml-auto p-2\" color=\"primary\">edit</Button>{/if}</li>\n    {/each}\n    </ul>\n{:catch error}\n    <p style=\"color: red\">{error.message}</p>\n{/await}\n\n\n<style>\n    li {\n        font-size: 1.3rem;\n    }\n    .right {\n        float: right;\n    }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA6BC,EAAE,cAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACjB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,cAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;ACrBE,OAAO,cAAC,CAAC,AACL,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,AACrB,CAAC,AACD,EAAE,cAAC,CAAC,AACA,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,KAAK,AAClB,CAAC;ACCD,QAAQ,eAAC,CAAC,AACN,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,sBAClC,CAAC,AACD,WAAW,sBAAQ,CAAC,AAChB,IAAI,AAAC,CAAC,AAAC,OAAO,CAAE,CAAC,AAAE,CAAC,AACpB,EAAE,AAAC,CAAC,AAAC,OAAO,CAAE,CAAC,AAAE,CAAC,AACtB,CAAC,AACD,EAAE,eAAC,CAAC,AACA,eAAe,CAAE,QAAQ,AAC7B,CAAC;ACkBD,KAAK,eAAC,CAAC,AAAC,OAAO,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,SAAS,CAAE,IAAI,AAAE,CAAC;ACexD,KAAK,eAAC,CAAC,AAAC,OAAO,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,SAAS,CAAE,IAAI,AAAE,CAAC;ACxBxD,EAAE,cAAC,CAAC,AACA,SAAS,CAAE,MAAM,AACrB,CAAC"
}